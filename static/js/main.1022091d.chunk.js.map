{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["calc","x","y","window","innerWidth","innerHeight","trans1","trans2","concat","Card","_useSpring","useSpring","xy","config","mass","tension","friction","_useSpring2","Object","slicedToArray","props","set","react_default","a","createElement","class","onMouseMove","_ref","clientX","clientY","rel","href","className","web","div","style","transform","interpolate","App","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAuEMA,EAAO,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAIE,OAAOC,WAAa,EAAGF,EAAIC,OAAOE,YAAc,IACtEC,EAAS,SAACL,GAAD,4BACTM,EAAS,SAACN,EAAGC,GAAJ,qBAAAM,OAAyBP,EAAI,EAAI,GAAjC,OAAAO,OAAyCN,EAAI,GAAK,IAAlD,UAIf,SAASO,IAAO,IAAAC,EACOC,YAAU,iBAAO,CAAEC,GAAI,CAAC,EAAG,GAAIC,OAAQ,CAAEC,KAAM,GAAIC,QAAS,IAAKC,SAAU,QADlFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GACPU,EADOH,EAAA,GACAI,EADAJ,EAAA,GAEd,OACEK,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YAAYC,YAAa,SAAAC,GAAA,IAAY1B,EAAZ0B,EAAGC,QAAqB1B,EAAxByB,EAAeE,QAAf,OAAgCR,EAAI,CAAET,GAAIZ,EAAKC,EAAGC,OACpFoB,EAAAC,EAAAC,cAAA,QACEM,IAAI,aACJC,KAAK,qDAEPT,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,SAAd,cACAV,EAAAC,EAAAC,cAACS,EAAA,EAASC,IAAV,CAAcT,MAAM,QAAQU,MAAO,CAAEC,UAAWhB,EAAMR,GAAGyB,YAAY/B,MACrEgB,EAAAC,EAAAC,cAACS,EAAA,EAASC,IAAV,CAAcT,MAAM,QAAQU,MAAO,CAAEC,UAAWhB,EAAMR,GAAGyB,YAAY9B,OAa5D+B,MANf,WACE,OACEhB,EAAAC,EAAAC,cAACf,EAAD,OCpFgB8B,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1022091d.chunk.js","sourcesContent":["// import React, { useRef, useState, useEffect } from 'react'\nimport React from 'react';\nimport { useSpring, animated } from 'react-spring'\n// import { Illustration, Ellipse, Shape, RoundedRect, useRender, Hemisphere } from 'react-zdog'\n// // New react-spring target, for native animation outside of React\n// import { a, useSpring } from 'react-spring/zdog'\nimport './index.css'\n\n// /** --- Basic, re-usable shapes -------------------------- */\n// const TAU = Math.PI * 2\n// const Eye = props => <Ellipse diameter={1.5} quarters={2} translate={{ x: -2.2, y: 0, z: 4.5 }} rotate={{ z: -TAU / 4 }} color=\"#444B6E\" stroke={0.5} {...props} />\n// const Leg = props => (\n//   <a.Shape path={[{ y: 0 }, { y: 6 }]} translate={{ x: -3 }} color=\"#747B9E\" stroke={4} {...props}>\n//     <Shape path={[{ y: 0 }, { y: 6 }]} translate={{ y: 6 }} rotate={{ x: -TAU / 8 }} color=\"#747B9E\" stroke={4} />\n//     <RoundedRect width={2} height={4} cornerRadius={1} translate={{ y: 12, z: -3.5 }} rotate={{ x: TAU / 6 }} color=\"#444B6E\" fill stroke={4} />\n//   </a.Shape>\n// )\n// const Arm = props => (\n//   <a.Shape path={[{ y: 0 }, { y: 4 }]} translate={{ x: -5, y: -2 }} color=\"#F0F2EF\" stroke={4} {...props}>\n//     <Shape path={[{ y: 0 }, { y: 4 }]} translate={{ y: 6 }} rotate={{ x: TAU / 8 }} color=\"#EA0\" stroke={4} />\n//     <Shape translate={{ z: 4, y: 9, x: 0 }} stroke={5.4} color=\"#EA0\" />\n//   </a.Shape>\n// )\n\n// /** --- Assembly ----------------------------------------- */\n// function Guy() {\n//   // Change motion every second\n//   const [up, setUp] = useState(true)\n//   useEffect(() => void setInterval(() => setUp(previous => !previous), 450), [])\n//   // Turn static values into animated values\n//   const { rotation, color, size } = useSpring({ size: up ? 1.2 : 0.2, color: up ? '#EA0' : 'tomato', rotation: up ? 0 : Math.PI })\n//   // useRender allows us to hook into the render-loop\n//   const ref = useRef()\n//   let t = 0\n//   useRender(() => (ref.current.rotate.y = Math.cos((t += 0.1) / TAU)))\n//   return (\n//     <Shape ref={ref} path={[{ x: -3 }, { x: 3 }]} stroke={4} color=\"#747B9E\">\n//       <a.Anchor rotate={rotation.interpolate(r => ({ x: TAU / 18 + -r / 4 }))}>\n//         <Shape path={[{ x: -1.5 }, { x: 1.5 }]} translate={{ y: -6 }} stroke={9} color=\"#E1E5EE\">\n//           <a.Shape stroke={11} translate={{ y: -9.5 }} color={color}>\n//             <Shape translate={{ x: 0, y: -2, z: -4 }} stroke={8} color=\"#747B9E\" />\n//             <Ellipse diameter={6} rotate={{ x: -TAU / 10 }} translate={{ y: -4, z: -1 }} stroke={4} color=\"#444B6E\" fill />\n//             <Eye />\n//             <Eye translate={{ x: 2.2, z: 4.5 }} />\n//             <a.Ellipse diameter={1.3} scale={size} translate={{ y: 2, z: 4.5 }} rotate={{ z: TAU / 4 }} closed color=\"#444B6E\" stroke={0.5} fill />\n//             <Ellipse diameter={1} translate={{ x: -3.5, y: 1.5, z: 4.5 }} rotate={{ z: TAU / 4 }} closed color=\"indianred\" stroke={0.5} fill />\n//             <Ellipse diameter={1} translate={{ x: 3.5, y: 1.5, z: 4.5 }} rotate={{ z: TAU / 4 }} closed color=\"indianred\" stroke={0.5} fill />\n//             <Ellipse diameter={0.5} translate={{ x: 4.5, y: -4.5, z: 4.5 }} rotate={{ z: TAU / 4 }} closed color=\"lightblue\" stroke={0.5} fill />\n//           </a.Shape>\n//           <Arm rotate={rotation.interpolate(r => ({ x: -TAU / 4 + r }))} />\n//           <Arm translate={{ x: 5, y: -2 }} rotate={rotation.interpolate(r => ({ x: TAU / 4 - r }))} />\n//         </Shape>\n//       </a.Anchor>\n//       <Leg rotate={rotation.interpolate(r => ({ x: TAU / 5 - r / 1.2 }))} />\n//       <Leg translate={{ x: 3 }} rotate={rotation.interpolate(r => ({ x: -TAU / 5 + r / 1.2 }))} />\n//     </Shape>\n//   )\n// }\n\n// function Milou() {\n//   //const [up, setUp] = useState(true)\n//   ///useEffect(() => void setInterval(() => setUp(prev => !prev), 450), [])\n//   //const { rotation, color, size } = useSpring({ size: up ? 1.2 : 0.2, color: up ? '#EA0' : 'tomato', rotation: up ? 0 : Math.PI })\n//   //const ref = useRef()\n//   //let t = 0\n//   //useRender(() => (ref2.current.rotate.y = Math.cos((t += 0.1) / TAU)))\n//   return (\n//     <Hemisphere diameter={20} stroke={false} color=\"#C25\" backface=\"#EA0\" />\n//   )\n// }\n\nconst calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2]\nconst trans1 = (x) => `translate3d(0,0,0)`\nconst trans2 = (x, y) => `translate3d(${x / 3 + 35}px,${y / 15 - 230}px,0)`\n// const trans3 = (x, y) => `translate3d(${x / 6 - 250}px,${y / 6 - 200}px,0)`\n// const trans4 = (x, y) => `translate3d(${x / 3.5}px,${y / 3.5}px,0)`\n\nfunction Card() {\n  const [props, set] = useSpring(() => ({ xy: [0, 0], config: { mass: 10, tension: 550, friction: 140 } }))\n  return (\n    <div class=\"container\" onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}>\n      <link \n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/css?family=Underdog\">\n      </link>\n      <h1 className=\"title\">CasaDeMill</h1>\n      <animated.div class=\"card1\" style={{ transform: props.xy.interpolate(trans1) }} />\n      <animated.div class=\"card2\" style={{ transform: props.xy.interpolate(trans2) }} />\n      {/* <animated.div class=\"card3\" style={{ transform: props.xy.interpolate(trans3) }} />\n      <animated.div class=\"card4\" style={{ transform: props.xy.interpolate(trans4) }} /> */}\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <Card />\n  );\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}